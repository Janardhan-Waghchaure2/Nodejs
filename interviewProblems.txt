1. What is NodeJS?
NodeJS is an open-source, cross-platform JavaScript runtime environment engine used for 
executing JavaScript code outside the browser. It is built on Google Chrome’s V8 JavaScript engine. 
Some of the key features of the NodeJS are mentioned below:


Single-threaded
Non-Blocking, Asynchronous I/O
Cross-platform
Fast Execution (V8 Engine)
Real-Time Data Handling

2. What is NPM?
NPM stands for the Node Package Manager. It is the package manager for the NodeJS environment. 
It is used to install, share, and manage dependencies (libraries, tools, or packages) in JavaScript applications. 
Below are the following key points about the NPM:
    NPM uses a package.json file in NodeJS projects to track project dependencies, versions, 
    scripts, and metadata like the project’s name and version.
    
    NPM is accessed by a command-line interface (CLI). Common commands include npm install to 
    install packages, npm update to update them, and npm uninstall to remove them.

3. Why is NodeJS single-threaded?
NodeJS is single-threaded because it’s based on the asynchronous, non-blocking nature of JavaScript. 
This design makes it simpler to develop and maintain, and it allows NodeJS to handle many concurrent requests efficiently.


4. What kind of API function is supported by NodeJS?
There are two types of API functions supported by NodeJS:

Synchronous: These API functions are used for blocking code.
Asynchronous: These API functions are used for non-blocking code.


5. Is Node.js Single or Multi-Threaded?
   For JavaScript execution? Yes, it's single-threaded.
   For background tasks (I/O & CPU-heavy work)? No, it uses a thread pool to run multiple tasks in parallel.
   nodejs uses libuv library to implement this multi-threded nature.


6. What is a module in NodeJS?
    In a NodeJS Application, a Module can be considered as a block of code that provides a simple or complex functionality 
    that can communicate with external application. Modules can be organized in a single file or a collection of multiple files/folders. 
    They are useful because of their reusability and ability to reduce the complexity of code into smaller pieces. 
    Examples of modules are. http, fs, os, path, etc.
        Built-in Modules (Core Modules) -> fs , http , file , crypto , ..
        Third-Party Modules (npm Packages) -> express , mongoose , axios , ..
        User-Defined Modules -> created by devs to organize code.

7. What is the purpose of the ‘require’ keyword in NodeJS?
   The require keyword in NodeJS is used to include and import modules (external or built-in) into a NodeJS application.

8. What is middleware?
   Middleware is the function that works between the request and the response cycle. Middleware gets executed
   after the server receives the request and before the controller sends the response.

9. create a simple http server
   const http = require("http");
   const server = http.createServer(
        (res , res) => {
            res.writeHead(200 , {'Content-Type' : 'text/plain'});
            res.end('hello , world');
        }
   );
   server.listen(3000 , () => {
       console.log("server is running at http://localhost:3000/");
   });


10. What is package.json in NodeJS?
package.json in NodeJS is a metadata file that contains project-specific information such as dependencies, 
scripts, version, author details, and other configuration settings required for managing and building the project.

Example:
{
    "name": "app",
    "version": "1.0.0",
    "main": "index.js",
    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
    },
    "keywords": [],
    "author": "",
    "license": "ISC",
    "description": "",
    "dependencies": {
        "express": "^4.21.2"
    }
}

11. What are promises in NodeJS?
A promise is an advancement of callbacks in NodeJS. In other words, a promise is a 
JavaScript object that is used to handle all the asynchronous data operations. While 
developing an application, you may encounter that you are using a lot of nested callback 
functions, which causes a problem of callback hell. Promises solve this problem of callback hell.
